from flask import Flask, request, jsonify, render_template, redirect, url_for, session
import requests
import json
import re
from werkzeug.security import generate_password_hash, check_password_hash
from flask_mysqldb import MySQL

app = Flask(__name__)

# Konfigurasi MySQL
app.config['MYSQL_HOST'] = 'localhost'
app.config['MYSQL_USER'] = 'root'  
app.config['MYSQL_PASSWORD'] = ''  
app.config['MYSQL_DB'] = 'konsul_gizi'
app.secret_key = '771d82a8f322c86e604e7accf3bc952d396902320ab20d65'  # secret key untuk sesi

mysql = MySQL(app)

# Halaman register
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        hashed_password = generate_password_hash(password, method='pbkdf2:sha256')

        cur = mysql.connection.cursor()
        cur.execute("INSERT INTO users (username, password) VALUES (%s, %s)", (username, hashed_password))
        mysql.connection.commit()
        cur.close()

        return redirect(url_for('login'))

    return render_template('register.html')

# Halaman login
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        cur = mysql.connection.cursor()
        cur.execute("SELECT * FROM users WHERE username = %s", [username])
        user = cur.fetchone()
        cur.close()

        if user and check_password_hash(user[2], password):
            session['user_id'] = user[0]
            return redirect(url_for('home'))
        else:
            return render_template('login.html', message="Username atau password salah.")
    
    return render_template('login.html')


# Halaman utama setelah login
@app.route('/')
def home():
    if 'user_id' in session:
        return render_template('index.html')
    return redirect(url_for('login'))

# Halaman logout
@app.route('/logout')
def logout():
    session.pop('user_id', None)
    return redirect(url_for('login'))

# Fungsi untuk menangani respons dari API
def generate_completion(prompt):
    ollama_url = "http://localhost:11434/api/generate"
    payload = {"model": "llama3.1:8b", "prompt": prompt}
    headers = {"Content-Type": "application/json"}

    response = requests.post(ollama_url, json=payload, headers=headers, stream=True)
    full_response = ""
    for line in response.iter_lines():
        if line:
            try:
                response_part = json.loads(line.decode('utf-8'))['response']
                full_response += response_part
            except json.JSONDecodeError:
                full_response += " (Kesalahan parsing respons)"

    return full_response

# Endpoint untuk pertanyaan kesehatan gizi
@app.route('/ask', methods=['POST'])
def ask():
    user_input = request.json.get("question")

    # #
    # if 'user_id' not in session:
    #     return jsonify({"response": "Anda harus login untuk menggunakan fitur ini."}), 403
    
    user_id = session['user_id']
    konsul_gizi_keywords = {
        "gizi", "nutrisi", "diet", "protein", "sayuran", "buah", "vitamin", "serat", 
        "kesehatan", "mineral", "keseimbangan", "kalori", "karbohidrat", "lemak", "mikronutrien", 
        "makronutrien", "olahraga", "sehat", "asupan", "metabolisme", "diabetes", "obesitas", 
        "kolesterol", "tekanan darah", "suplemen", "hidrasi", "antioxidant", "prebiotik", 
        "probiotik", "vegetarian", "vegan", "pola makan", "energi", "pengolahan makanan", 
        "makanan organik", "makanan sehat", "menu diet", "perencanaan makanan", "makanan berimbang", 
        "kebutuhan kalori", "indeks glikemik", "indeks massa tubuh", "BMI", "bahan makanan alami", 
        "makanan rendah lemak", "makanan kaya protein", "porsi makan", "makanan rendah gula", 
        "makanan berserat", "diet rendah karbohidrat", "makanan super", "makanan fungsional", 
        "makanan rendah garam", "makanan fermentasi", "hipertensi", "anemia", "penuaan sehat", 
        "kondisi medis", "kesehatan jantung", "diet untuk ibu hamil", "diet untuk anak-anak", 
        "penurunan berat badan", "pengelolaan berat badan", "peningkatan", "massa", "otot", 
        "diet seimbang", "sakit", "terimakasih", "informasinya", "takaran", "halo", "perhitungan"
    }
    
    if not any(keyword in user_input.lower() for keyword in konsul_gizi_keywords):
        return jsonify({"response": "Saya hanya dapat menjawab pertanyaan terkait kesehatan gizi."}), 400

    # Dapatkan respons dari generate_completion
    bot_response = generate_completion(user_input)

    # Bersihkan dan format respons
    bot_response = re.sub(r'[^A-Za-z0-9\s.,-]', '', bot_response)
    bot_response = re.sub(r'\s+', ' ', bot_response).strip()
    
    # Menyimpan History Chat ke Database
    cur = mysql.connection.cursor()
    cur.execute("INSERT INTO chat_history (user_id, message, response) VALUES (%s, %s, %s)", (user_id, user_input, bot_response))
    mysql.connection.commit()
    cur.close()

    return jsonify({"response": bot_response})

# History Chat
@app.route('/history', methods=['GET'])
def history():
    # if 'user_id' not in session:
    #     return jsonify({"error": "Anda harus login untuk melihat riwayat chat."}), 403

    user_id = session['user_id']
    cur = mysql.connection.cursor()
    cur.execute("SELECT message, response, timestamp FROM chat_history WHERE user_id = %s ORDER BY timestamp ASC", [user_id])
    history = cur.fetchall()
    cur.close()

    chat_list = [{"message": row[0], "response": row[1], "timestamp": row[2].strftime('%Y-%m-%d %H:%M:%S')} for row in history]
    return jsonify(chat_list)


if __name__ == "__main__":
    app.run(debug=True)